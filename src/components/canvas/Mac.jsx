"use client"
import * as THREE from 'three'
import { motion } from "framer-motion";
import Image from "next/image";
import heroImg from "@/assets/user.svg"
import React, { Suspense, useEffect, useRef, useState } from 'react'
import { Canvas, useFrame, useThree } from '@react-three/fiber'
import { Environment, useGLTF, ContactShadows, OrbitControls } from '@react-three/drei'
import { useSpring } from '@react-spring/core'
import { a as three } from '@react-spring/three'
import { a as web } from '@react-spring/web'
import { gsap } from "gsap";
import backgroundImage from "@/assets/herobg.png";
import { ScrollTrigger } from "gsap/dist/ScrollTrigger";

function ResetCamera({ open }) {
  const { camera } = useThree();
  useEffect(() => {
    if (!open) {
      camera.position.set(0, 0, -30);
      camera.lookAt(0, 0, 0);
    }
  }, [open, camera]);
  return null;
}

function Model({ open, hinge, ...props }) {
  const group = useRef()
  // Load model       
  const { nodes, materials } = useGLTF('./mac/mac-draco.glb')
  // Take care of cursor state on hover
  const [hovered, setHovered] = useState(false)
  useEffect(() => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'), [hovered])
  // Make it float in the air when it's opened
  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, open ? Math.cos(t / 10) / 10 + 0.25 : 0, 0.1)
    group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, open ? Math.sin(t / 10) / 4 : 0, 0.1)
    group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, open ? Math.sin(t / 10) / 10 : 0, 0.1)
    group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, open ? (-2 + Math.sin(t)) / 3 : -4.3, 0.1)
  })
  // The view was auto-generated by: https://github.com/pmndrs/gltfjsx
  // Events and spring animations were added afterwards
  return (
    <group ref={group} {...props} onPointerOver={(e) => (e.stopPropagation(), setHovered(true))} onPointerOut={(e) => setHovered(false)} dispose={null}>
      <three.group rotation-x={hinge} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />
          <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />
          <mesh material={materials['screen.001']} geometry={nodes['Cube008_2'].geometry} />
        </group>
      </three.group>
      <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />
      <group position={[0, -0.1, 3.39]}>
        <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />
        <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />
      </group>
      <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />
    </group>
  )
}

export default function Mac() {
  // This flag controls open state, alternates between true & false
  const [open, setOpen] = useState(false)
  // We turn this into a spring animation that interpolates between 0 and 1
  const props = useSpring({ open: Number(open) })
  const firstText = useRef(null);
  const secondText = useRef(null);
  const slider = useRef(null);
  const [scale, setScale] = useState([1, 1, 1]);
  const imageRef = useRef(null);
  const textRef = useRef(null);
  const DevRef = useRef(null);
  useEffect(() => {
      document.body.style.overflow = 'hidden';
  });
  useEffect(() => {
    if (open) {
      gsap.fromTo(imageRef.current, { opacity: 0, y: 50 }, { opacity: 1, y: 0, duration: 2 });
      gsap.fromTo(textRef.current, { opacity: 0, y: 50 }, { opacity: 1, y: 0, duration: 2 });
      gsap.fromTo(DevRef.current, { opacity: 0, y: 50 }, { opacity: 1, y: 0, duration: 2 });
    } else {
      gsap.to(imageRef.current, { opacity: 0, y: 50, duration: 1 });
      gsap.to(textRef.current, { opacity: 0, y: 50, duration: 1 });
      gsap.to(DevRef.current, { opacity: 0, y: 50, duration: 1 });
    }
  }, [open]);
  let xPercent = 0;
  let direction = -1;
  useEffect(() => {
    gsap.registerPlugin(ScrollTrigger);
    gsap.to(slider.current, {
      scrollTrigger: {
        trigger: document.documentElement,
        scrub: 0.5,
        start: 0,
        end: window.innerHeight,
        onUpdate: e => direction = e.direction * -1
      },
      x: "-500px",
    })
    requestAnimationFrame(animate);
  }, []);

  const animate = () => {
    if (xPercent < -100) {
      xPercent = 0;
    }
    else if (xPercent > 0) {
      xPercent = -100;
    }
    gsap.set(firstText.current, { xPercent: xPercent })
    gsap.set(secondText.current, { xPercent: xPercent })
    requestAnimationFrame(animate);
    xPercent += 0.1 * direction;
  }
  return (
    <web.main className="h-screen" style={{ position: 'relative'}} >
    <Image  src={backgroundImage} alt="hero" className="z-[0] absolute right-0 h-screen " />
      {open && (
        <div>
          <div
            className={`absolute inset-0 top-[20vh] right-80 z-[9] animation  max-w-7xl mx-auto sm:px-16 px-6 flex flex-row items-start gap-5`}
          >
            <div className='flex flex-col justify-center items-center mt-5 ml-0'>
              <div className='w-5 h-5 rounded-full bg-[#915EFF]' />
              <div className='w-1 sm:h-80 h-40 violet-gradient' />
            </div>

            <div data-scroll data-scroll-speed='0.4' className='z-9' ref={textRef}>
              <h1 className={`font-black lg:text-[90px] sm:text-[60px] xs:text-[50px] text-[40px] lg:leading-[98px] mt-20 text-white`}>
                Hi, I'm <p className='text-transparent bg-clip-text bg-gradient-to-r from-purple-500 to-cyan-500 text-[60px] lg:text-[110px]'>Swyam</p>
              </h1>

            </div>
          </div>

          <Image loading="lazy" src={heroImg} alt="hero" className="z-[9] absolute bottom-24 right-0 animation" ref={imageRef} />
          <div className="sliderContainer md:z-[9]">
            <div ref={slider} className="slider overflow-hidden text-secondary text-[50px] lg:text-[200px]" ref={DevRef} >
              <p ref={firstText} >Full-Stack Developer.</p>
              <p ref={secondText}>Full-Stack Developer.</p>
            </div>
          </div>
          <div className='absolute xs:bottom-10 bottom-32 w-full flex justify-center items-center z-30 cursor-pointer'>
            <a href='#about'>
              <div className='w-[35px] h-[64px] rounded-3xl border-4 border-secondary flex justify-center items-start p-2 cursor-pointer'>
                <motion.div
                  animate={{
                    y: [0, 24, 0],
                  }}
                  transition={{
                    duration: 1.5,
                    repeat: Infinity,
                    repeatType: "loop",
                  }}
                  className='w-3 h-3 rounded-full bg-secondary mb-1'
                />
              </div>
            </a>
          </div>
        </div>
      )}
      <web.h1
        style={{
          opacity: props.open.to([0, 1], [1, 0]),
          transform: props.open.to((o) => `translate3d(-50%,${o * 50 - 100}px,0)`),
        }}
      >
      </web.h1>
      <Canvas dpr={[1, 2]} camera={{ position: [0, 0, -30], fov: 35 }} style={{ position: 'relative', zIndex: 10 }}>
        <pointLight position={[10, 10, 10]} intensity={1.5} />
        <Suspense fallback={null}>
          <group rotation={[0, Math.PI, 0]} onClick={(e) => (e.stopPropagation(), setOpen(!open))}>
            <Model open={open} hinge={props.open.to([0, 1], [1.575, -0.425])} scale={scale} />
          </group>
          <Environment preset="city" />
          {open && (
            <OrbitControls maxPolarAngle={Math.PI / 2} minPolarAngle={Math.PI / 2} enableZoom={false} />
          )}
          <ResetCamera open={open} />
        </Suspense>
        <ContactShadows position={[0, -4.5, 0]} opacity={0.4} scale={20} blur={1.75} far={4.5} />
      </Canvas>
    </web.main>
  )
}
